<?php

use Drupal\http_response_headers\Entity\ResponseHeaderInterface;

/**
 * Implements hook_requirements().
 */
function http_response_headers_requirements($phase) {
  $requirements = [];
  if ($phase == 'runtime') {
    $entity_manager = \Drupal::entityTypeManager()->getStorage('response_header');
    // Report response headers that should be configured.
    $content_security_policy = $entity_manager->load('content_security_policy');
    if (!isset($content_security_policy) || !($content_security_policy instanceof ResponseHeaderInterface) || empty($content_security_policy->get('value'))) {
      $requirements['response_header_security_policy'] = [
        'title' => t('Content Security Policy'),
        'value' => t('Not configured'),
        'description' => t("It is highly recommended to set a secure Content Security Policy.
        See the <a href=':help'>help page</a> for more information.", [':help' => '/admin/help/http_response_headers']),
        'severity' => REQUIREMENT_WARNING,
      ];
    }
  }
  return $requirements;
}

/**
 * Changing to using entities instead of configuration objects.
 */
function http_response_headers_update_8001() {
  $old_config = \Drupal::configFactory()->get('http_response_headers.settings');
  if (!empty($old_config->get('headers'))) {
    foreach ($old_config->get('headers') as $header) {
      $entity = [
        'id' => preg_replace('/[^a-z0-9_]+/', '_', strtolower($header['name'])),
        'label' => $header['name'],
        'name' => $header['name'],
        'description' => '',
        'value' => $header['value'],
        'visibility' => [],
      ];
      $entity_manager = \Drupal::entityTypeManager()->getStorage('response_header');
      if ($existing_entity = current($entity_manager->loadByProperties(array('name' => $entity['name'])))) {
        $saved = $existing_entity->set('value', $entity['value'])->save();
      }
      else {
        $saved = $entity_manager->create($entity)->save();
      }
    }
    \Drupal::configFactory()->getEditable('http_response_headers.settings')->delete();
  }
}
